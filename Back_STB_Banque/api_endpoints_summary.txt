# Récapitulatif des Endpoints d'API Flask

Ce fichier contient tous les chemins d'API que nous avons créés, organisés par catégorie et par port.

---

## 1. API Principale (Port: 8000)
    (Fichier Python: app.py)

### 1.1. Aperçu des Données
- **GET /data-overview**
  - Description: Retourne les 5 premières lignes et les informations de structure des données clients et fournisseurs (JSON).
  - Exemple: http://127.0.0.1:8000/data-overview

### 1.2. Exploration des Clients (Images de Graphiques)
- **GET /clients/exploration/total-montant-cheque-distribution-image**
  - Description: Image de l'histogramme de la distribution du "Total montant cheque" pour les clients (PNG).
  - Exemple: http://127.0.0.1:8000/clients/exploration/total-montant-cheque-distribution-image
- **GET /clients/exploration/montant-cheque-distribution-image**
  - Description: Image de l'histogramme de la distribution du "Montant_cheque" pour les clients (PNG).
  - Exemple: http://127.0.0.1:8000/clients/exploration/montant-cheque-distribution-image
- **GET /clients/exploration/nombre-distribution-image**
  - Description: Image de l'histogramme de la distribution du "Nombre" de chèques/transactions pour les clients (PNG).
  - Exemple: http://127.0.0.1:8000/clients/exploration/nombre-distribution-image
- **GET /clients/exploration/categorical-distribution-image?column={category_name}**
  - Description: Image du diagramme en barres pour une colonne catégorielle des clients (PNG).
  - Paramètres: `column` (ex: `Segment`, `Tranche_Age`, `Sexe`, `Statut_Civil`, `Situation_Contractuelle`, `Civilite`).
  - Exemple: http://127.0.0.1:8000/clients/exploration/categorical-distribution-image?column=Segment
- **GET /clients/exploration/time-series-image**
  - Description: Image du graphique linéaire de l'évolution mensuelle du "Total montant cheque" pour les clients (PNG).
  - Exemple: http://127.0.0.1:8000/clients/exploration/time-series-image

### 1.3. Exploration des Fournisseurs (Images de Graphiques)
- **GET /fournisseurs/exploration/total-montant-cheque-distribution-image**
  - Description: Image de l'histogramme de la distribution du "Total montant cheque" pour les fournisseurs (PNG).
  - Exemple: http://127.0.0.1:8000/fournisseurs/exploration/total-montant-cheque-distribution-image
- **GET /fournisseurs/exploration/montant-cheque-distribution-image**
  - Description: Image de l'histogramme de la distribution du "Montant_cheque" pour les fournisseurs (PNG).
  - Exemple: http://127.0.0.1:8000/fournisseurs/exploration/montant-cheque-distribution-image
- **GET /fournisseurs/exploration/nombre-distribution-image**
  - Description: Image de l'histogramme de la distribution du "Nombre" de chèques/transactions pour les fournisseurs (PNG).
  - Exemple: http://127.0.0.1:8000/fournisseurs/exploration/nombre-distribution-image
- **GET /fournisseurs/exploration/categorical-distribution-image?column={category_name}**
  - Description: Image du diagramme en barres pour une colonne catégorielle des fournisseurs (Top 10 pour `Activite_Economique`) (PNG).
  - Paramètres: `column` (ex: `Activite_Economique`, `Segment`, `Sexe`, `Statut_Civil`).
  - Exemple: http://127.0.0.1:8000/fournisseurs/exploration/categorical-distribution-image?column=Activite_Economique
- **GET /fournisseurs/exploration/time-series-image**
  - Description: Image du graphique linéaire de l'évolution mensuelle du "Total montant cheque" pour les fournisseurs (PNG).
  - Exemple: http://127.0.0.1:8000/fournisseurs/exploration/time-series-image

---

## 2. API d'Analyse Avancée (IA et Relations) (Port: 5001)
    (Fichier Python: AI.py ou anomaly_detection.py)

### 2.1. Détection d'Anomalies (Images de Graphiques)
- **GET /ai/anomalies/clients/pca-image**
  - Description: Image du scatter plot des anomalies clients dans l'espace PCA 2D (PNG).
  - Exemple: http://127.0.0.1:5001/ai/anomalies/clients/pca-image
- **GET /ai/anomalies/fournisseurs/pca-image**
  - Description: Image du scatter plot des anomalies fournisseurs dans l'espace PCA 2D (PNG).
  - Exemple: http://127.0.0.1:5001/ai/anomalies/fournisseurs/pca-image
- **GET /ai/anomalies/clients/fragmentation-anomaly-image**
  - Description: Image du scatter plot du "Total montant cheque" vs "Score de Fragmentation" pour les clients, avec anomalies mises en évidence (PNG).
  - Exemple: http://127.0.0.1:5001/ai/anomalies/clients/fragmentation-anomaly-image

### 2.2. Clustering K-Means (Images de Graphiques)
- **GET /ai/clustering/clients-image?k={num_clusters}**
  - Description: Image du scatter plot du clustering K-Means pour les clients dans l'espace PCA 2D (PNG).
  - Paramètres: `k` (optionnel, nombre de clusters, ex: `3`, `4`, etc. par défaut 3).
  - Exemple: http://127.0.0.1:5001/ai/clustering/clients-image?k=4
- **GET /ai/clustering/fournisseurs-image?k={num_clusters}**
  - Description: Image du scatter plot du clustering K-Means pour les fournisseurs dans l'espace PCA 2D (PNG).
  - Paramètres: `k` (optionnel, nombre de clusters, ex: `3`, `4`, etc. par défaut 3).
  - Exemple: http://127.0.0.1:5001/ai/clustering/fournisseurs-image?k=5

### 2.3. Analyse de la Relation Clients-Fournisseurs (Images de Graphiques)
- **GET /ai/relations/correlation-matrix-image**
  - Description: Image de la matrice de corrélation des comportements de paiement pour les entités communes (PNG).
  - Exemple: http://127.0.0.1:5001/ai/relations/correlation-matrix-image
- **GET /ai/relations/total-amount-scatter-image**
  - Description: Image du scatter plot comparant le "Total montant cheque" Client vs Fournisseur (en tant que payeur) pour les entités communes (PNG).
  - Exemple: http://127.0.0.1:5001/ai/relations/total-amount-scatter-image
- **GET /ai/relations/fragmentation-scatter-image**
  - Description: Image du scatter plot comparant le "Score de Fragmentation" Client vs Fournisseur (en tant que payeur) pour les entités communes (PNG).
  - Exemple: http://127.0.0.1:5001/ai/relations/fragmentation-scatter-image

---

## 3. API Chatbot (Port: 5002)
    (Fichier Python: chatbot_api.py)

- **POST /chat**
  - Description: Interagit avec le modèle de langage Gemini pour poser des questions sur les données clients et fournisseurs.
  - Corps de la requête (JSON):
    ```json
    {
        "user_message": "Votre question ici",
        "chat_history": [
            // Optionnel: l'historique de la conversation au format Gemini
            // {"role": "user", "parts": ["Message utilisateur précédent"]},
            // {"role": "model", "parts": ["Réponse du modèle précédente"]}
        ]
    }
    ```
  - Réponse (JSON): `{"response": "La réponse du modèle Gemini"}`
  - Exemple: Faites une requête `POST` à `http://127.0.0.1:5002/chat` avec le corps JSON approprié.

---

## 4. API d'Authentification Firebase (Port: 5003)
    (Fichier Python: auth_api.py)

- **POST /auth/signup**
  - Description: Enregistre un nouvel utilisateur Firebase.
  - Corps de la requête (JSON): `{"email": "...", "password": "..."}`
  - Réponse (JSON): `{"success": true, "user": {...}}` ou `{"success": false, "error": "..."}`
  - Exemple: Faites une requête `POST` à `http://127.0.0.1:5003/auth/signup`

- **POST /auth/signin**
  - Description: Connecte un utilisateur Firebase.
  - Corps de la requête (JSON): `{"email": "...", "password": "..."}`
  - Réponse (JSON): `{"success": true, "user": {"email": ..., "localId": ..., "idToken": ..., "refreshToken": ...}}` ou `{"success": false, "error": "..."}`
  - Exemple: Faites une requête `POST` à `http://127.0.0.1:5003/auth/signin`

- **POST /auth/logout**
  - Description: Signale que l'utilisateur est déconnecté côté client (effacement des tokens).
  - Corps de la requête (JSON): Peut être vide `{}`.
  - Réponse (JSON): `{"success": true, "message": "..."}`
  - Exemple: Faites une requête `POST` à `http://127.0.0.1:5003/auth/logout`

---